/* eslint-disable react/prop-types */
import React from 'react';
import PropTypes from 'prop-types';
import Draggable from 'react-draggable';
import classNames from 'classnames';
import ButtonControls from '@ciscospark/react-component-button-controls';
import Video from '@ciscospark/react-component-video';
import Audio from '@ciscospark/react-component-audio';
import Avatar from '@ciscospark/react-component-avatar';

import withActiveCallHandlers from '../../enhancers/withActiveCallHandlers';

import styles from './styles.css';

const propTypes = {
  customActions: PropTypes.object,
  avatarImage: PropTypes.string,
  displayName: PropTypes.string,
  localMediaStream: PropTypes.object,
  localVideoPosition: PropTypes.object,
  onHangupClick: PropTypes.func.isRequired,
  onLocalVideoDragStop: PropTypes.func,
  onStartSendingAudio: PropTypes.func.isRequired,
  onStartSendingVideo: PropTypes.func.isRequired,
  onStopSendingAudio: PropTypes.func.isRequired,
  onStopSendingVideo: PropTypes.func.isRequired,
  remoteAudioStream: PropTypes.object,
  remoteMediaStream: PropTypes.object,
  remoteVideoStream: PropTypes.object,
  isSendingAudio: PropTypes.bool,
  isSendingVideo: PropTypes.bool,
  activeParticipantsCount: PropTypes.number,
  remoteVideoMuted: PropTypes.bool,
  hasVideo: PropTypes.bool,
  hasLocalVideo: PropTypes.bool
};

const defaultProps = {
  customActions: {components: [], onCallUpdate: null},
  avatarImage: '',
  displayName: '',
  localMediaStream: {},
  localVideoPosition: {x: 0, y: 0},
  onLocalVideoDragStop: () => {},
  remoteAudioStream: null,
  remoteMediaStream: null,
  remoteVideoStream: null,
  isSendingAudio: false,
  isSendingVideo: false,
  activeParticipantsCount: 0,
  remoteVideoMuted: false,
  hasVideo: true,
  hasLocalVideo: false
};

export class ActiveCall extends React.Component {
  componentDidMount() {
    this.onUpdate()
  }

  componentDidUpdate() {
    this.onUpdate()
  }

  componentWillUnmount() {
    this.onUpdate()
  }

  onUpdate() {
    if (this.props.customActions.onCallUpdate) {
      this.props.customActions.onCallUpdate(this.props.call);
    }
  }

  render() {
    const {
      isActive,
      localVideoPosition,
      onHangupClick,
      onLocalVideoDragStop,
      onStartSendingAudio,
      onStartSendingVideo,
      onStopSendingAudio,
      onStopSendingVideo,
      localMediaStream,
      remoteAudioStream,
      remoteMediaStream,
      remoteVideoStream,
      avatarImage,
      displayName,
      remoteVideoMuted,
      isSendingAudio,
      isSendingVideo,
      hasVideo,
      hasLocalVideo,
      activeParticipantsCount,
      customActions
    } = this.props;

    const connectedClass = remoteMediaStream && remoteMediaStream.active && styles.callConnected;

    const buttons = [
      {
        accessibilityLabel: 'Toggle Mute Audio',
        active: isSendingAudio === false,
        buttonType: 'microphone-muted',
        callControl: true,
        iconColor: 'white',
        onClick: isSendingAudio ? onStopSendingAudio : onStartSendingAudio
      }
    ];

    if (hasVideo) {
      buttons.push({
        accessibilityLabel: 'Mute Video',
        active: isSendingVideo === false,
        buttonType: 'camera-muted',
        callControl: true,
        onClick: isSendingVideo ? onStopSendingVideo : onStartSendingVideo
      });
    }
    buttons.push({
      accessibilityLabel: 'Hangup',
      buttonType: 'cancel',
      callControl: true,
      onClick: onHangupClick
    });

    let remoteAudio, remoteVideo;

    if (remoteMediaStream && remoteMediaStream.active) {
      remoteAudio = <Audio srcObject={remoteAudioStream} />;
      remoteVideo = <Video srcObject={remoteVideoStream} />;
      if (remoteVideoMuted) {
        remoteVideo = (
          <div className={classNames(styles.avatarView, 'remote-avatar-view')}>
            <Avatar image={avatarImage} name={displayName} />
          </div>
        );
      }
    }

    return (
      <div className={classNames(styles.callContainer, connectedClass, 'call-container')}>
        { activeParticipantsCount > 1 &&
          <div className={classNames(styles.remoteVideo, 'remote-video')}>
            { remoteVideo }
            { remoteAudio }
          </div>
        }
        {
          activeParticipantsCount < 2 &&
          <div className={classNames(styles.waiting, 'participants-waiting')}>Waiting for others to join...</div>
        }
        {
          hasVideo && hasLocalVideo &&
          <Draggable
            bounds="parent"
            defaultClassNameDragging={styles.reactDraggableDragging}
            onStop={onLocalVideoDragStop}
            position={localVideoPosition}
          >
            <div className={classNames(styles.localVideo, 'local-video')}>
              <Video audioMuted srcObject={localMediaStream} />
            </div>
          </Draggable>
        }
        <div className={classNames(styles.callControls, 'call-controls')}>
          {
            customActions.components.length &&
              customActions.components.map(({Component, props, children}) => <Component {...props}>{children}</Component>)
          }
          <ButtonControls buttons={buttons} showLabels={false} />
        </div>
      </div>
    );
  }
}

ActiveCall.propTypes = propTypes;
ActiveCall.defaultProps = defaultProps;

export default withActiveCallHandlers(ActiveCall);
