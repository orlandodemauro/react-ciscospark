import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import classNames from 'classnames';
import { compose } from 'recompose';

import Ringtone, {
  RINGTONE_TYPE_RINGBACK,
  RINGTONE_TYPE_INCOMING
} from '@ciscospark/react-component-ringtone';
import LoadingScreen from '@webex/react-component-loading-screen';
import Notifications from '@ciscospark/react-container-notifications';
import IncomingCall from '@ciscospark/react-component-incoming-call';

import InactiveCall from './components/call-inactive';
import ActiveCall from './components/call-active';

import messages from './messages';
import styles from './styles.css';
import getMeetWidgetProps from './selector';
import enhancers from './enhancers';

const injectedPropTypes = {
  avatarId: PropTypes.string,
  avatarImage: PropTypes.string,
  displayName: PropTypes.string,
  call: PropTypes.object,
  widgetMeet: PropTypes.object.isRequired,
  customActions: PropTypes.object
};

export const ownPropTypes = {
  call: PropTypes.object,
  destination: PropTypes.shape({
    id: PropTypes.string.isRequired,
    type: PropTypes.oneOf(['email', 'spaceId', 'userId', 'sip', 'pstn'])
  }).isRequired,
  eventNames: PropTypes.object,
  muteNotifications: PropTypes.bool,
  onEvent: PropTypes.func,
  startCall: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
};

export class MeetWidget extends Component {
  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  render() {
    const {
      intl,
      call,
      displayName,
      isActive,
      isIncoming,
      avatarImage,
      localVideoPosition,
      hasVideo,
      hasLocalVideo,
      customActions
    } = this.props;

    const { formatMessage } = intl;
    const { avatarId } = this.props.spaceDetails;

    if (displayName) {
      // Is this an incoming call?
      if (isIncoming) {
        const {
          handleAnswer,
          handleDecline
        } = this.props;

        return (
          <div className={classNames(styles.meetWidgetContainer, 'meet-widget-container')}>
            <IncomingCall
              answerButtonLabel={formatMessage(messages.answerButtonLabel)}
              avatarId={avatarId}
              avatarImage={avatarImage}
              declineButtonLabel={formatMessage(messages.declineButtonLabel)}
              displayName={displayName}
              incomingCallMessage={formatMessage(messages.incomingCallMessage)}
              onAnswerClick={handleAnswer}
              onDeclineClick={handleDecline}
            />
            <Ringtone play type={RINGTONE_TYPE_INCOMING} />
            <Notifications onEvent={this.props.handleEvent} isMuted={this.props.muteNotifications} />
          </div>
        );
      }

      // Is the call active?
      if (isActive) {
        const {
          handleHangup
        } = this.props;

        return (
          <div className={classNames(styles.meetWidgetContainer, 'meet-widget-container')}>
            <ActiveCall
              avatarId={avatarId}
              avatarImage={avatarImage}
              displayName={displayName}
              isActive={isActive}
              localVideoPosition={localVideoPosition}
              onHangupClick={handleHangup}
              hasVideo={hasVideo}
              hasLocalVideo={hasLocalVideo}
              customActions={customActions}
              call={call}
              {...call.toJS()}
            />
            <Ringtone play={status.isRinging} type={RINGTONE_TYPE_RINGBACK} />
          </div>
        );
      }

      return (
        <div className={classNames(styles.meetWidgetContainer, 'meet-widget-container')}>
          <InactiveCall
            avatarId={avatarId}
            avatarImage={avatarImage}
            callButtonAriaLabel={formatMessage(messages.callButtonAriaLabel)}
            callButtonLabel={formatMessage(messages.callButtonLabel)}
            displayName={displayName}
            onCallClick={this.props.handleCall}
          />
          <Notifications onEvent={this.props.handleEvent} isMuted={this.props.muteNotifications} />
        </div>
      );
    }

    return <LoadingScreen />;
  }
}


MeetWidget.propTypes = {
  ...ownPropTypes,
  ...injectedPropTypes
};


export default compose(
  connect(
    getMeetWidgetProps
  ),
  enhancers
)(MeetWidget);
